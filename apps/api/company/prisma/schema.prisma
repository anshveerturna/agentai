generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  id          String   @id @default(uuid())
  companyId   String?
  userId      String   @db.Uuid
  name        String
  description String?
  isTemplate  Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([userId])
}

/// Workflows are graph-based definitions used by the app.
model Workflow {
  id            String   @id @default(uuid())
  name          String
  description   String?
  graph         Json
  nodeOverrides Json
  version       Int      @default(1)
  status        String   @default("draft")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  versions        WorkflowVersion[]
  runs            WorkflowRun[]
  workingState    WorkflowWorkingState?
  activeVersionId String? @unique
  activeVersion   WorkflowVersion? @relation("ActiveVersion", fields: [activeVersionId], references: [id])
  defaultBranch   String @default("main")

  @@index([updatedAt])
}

model WorkflowVersion {
  id          String   @id @default(uuid())
  workflowId  String
  label       String?
  name        String
  description String?
  graph       Json
  createdAt   DateTime @default(now())
  // Versioning metadata
  versionNumber Int?
  semanticHash  String?
  diffSummary   String?
  branch        String  @default("main")

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  // Back-reference for the named relation from Workflow.activeVersion
  activeFor Workflow? @relation("ActiveVersion")

  @@index([workflowId])
  @@index([createdAt])
  @@index([workflowId, versionNumber])
}

model WorkflowRun {
  id          String   @id @default(uuid())
  workflowId  String
  status      String
  input       Json?
  result      Json?
  createdAt   DateTime @default(now())

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([createdAt])
}

/// Working copy per workflow (mutable draft state)
model WorkflowWorkingState {
  workflowId String   @id
  graph      Json
  layoutHash String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
}
